#!/bin/bash -ue
#
#---------------------------------------------------------------#
#  FH_parse_log.sh                                              #
#                                                               #
#  Version 1.00                                                 #
#  07.05.2011                                                   #
#                                                               #
#  Josh Tremel                                                  #
#  (tremeljosh@gmail.com)                                       #
#  University of Pittsburgh                                     #
#---------------------------------------------------------------#

COMMAND=$0
PROGRAM=FH_parse_log.sh
VERSION=1.00
USER=`whoami`

# Number of required arguments
ARGS=1

# Check for arguments, output help.
usage() {
	cat << usageEOF
Usage: FH_parse_log.sh <log_file>
Options: <none currently>
Description:
	Script to pull raw behavioral data from PsychoPy .log files
	and output something useful that can be imported into Excel.
	There is an Excel Macro that should then be run to generate
	event files for FIDL and some other behavioral summaries.
usageEOF
	exit $1
}

# Function for checking if a file exists
#+ note: pass in filename to check as $1
fileExists() {
	if [ -e $1 ]; then
		answerTrue=false
		while [ $answerTrue != "true" ]; do
			printf "\n$1 exists in current directory.\n\
Do you want to remove it? [y/n] "
			read answer
			case $answer in
				[yY] | [yY][eE][sS] )
					/bin/rm ./$1
					printf "\nExisting file removed\n"
					answerTrue=true
					;;
				[nN] | [N|n][O|o] )
					printf "\nFile not removed. Exiting...\n"
					exit 1
					;;
				*)
					answerTrue=false
					;;
			esac
		done
	fi
}

if [ $# -ne $ARGS ]; then
	usage 1 1>&2
fi

# grab filename
	logfile=`basename $1`
	logfileDir=`dirname $1`
	if [ $logfileDir == "." ]; then
		logfileDir=`pwd`
	fi

# set subject number and ID
	subjNumber=`printf $logfile | head -c 2`
	if [ "`printf $subjNumber | tail -c 1`" == "_" ]; then
		subjNumber=`printf $logfile | head -c 1`
	fi
	subjNumber=`printf %02d $subjNumber`
	subjID=fh0$subjNumber
	
# Tee stdout and stderr to a log file
	fileExists ${subjID}_log_parser.log

	exec > >(tee ${subjID}_log_parser.log)
	exec 2>&1

	printf "\n>>logfile to process is \"$logfile\"\n"

# check that file can be found
	if [ -e $logfile ]; then
		printf ">>logfile has been found\n"
	else
		printf "\nERROR: cannot find specified logfile\n"
		exit 1
	fi

# make sure it's a .log file...
	if [ `printf $logfile | tail -c 3` != "log" ]; then
		printf "\nERROR: argument is not a .log file\n"
		exit 1
	fi

# create file for key responses, remove any due to scanner
#+ trigger or manual 'q' for break screens
	pushd $logfileDir >/dev/null

# check for old file first
	fileExists ${subjID}_respData.txt

	touch ${subjID}_respData.txt
	respfile=${subjID}_respData.txt

	printf "\n# file generated by $USER on `date` with command:\n"
	printf "# CMD: \`grep Keypress $logfile | grep -v \"Keypress: 6\" | grep -v \"Keypress: lshift\" | \n\
	\tgrep -v \"Keypress: q\" | awk \'{print \$1, \$4}\'\`\n\n"

	printf "Onset Resp\n" >> $respfile

	grep Keypress $logfile | grep -v "Keypress: 6" | grep -v "Keypress: lshift" | grep -v "Keypress: q" | awk '{print $1, $4}' >> $respfile

	printf ">>OUTPUT: $respfile written to disk\n"


# create file for trial data
# check for old file first
	fileExists ${subjID}_trialData.txt

	touch ${subjID}_trialData.txt
	trialfile=${subjID}_trialData.txt

	printf "\n# file generated by $USER on `date` with command:\n"
	printf "# CMD: \`grep \"New trial\" $logfile | awk \'{print \$1,\$6,\$8,\$10,\$12,\$14,\$16}\' | \n\
	\tsed \"s/)://g;s/,//g;s/index=//g;s/\'//g;s/}//\"\`\n\n"

	printf "Onset Index Jitter Noise CorResp Object Path\n" >>$trialfile

	grep "New trial" $logfile | awk '{print $1,$6,$8,$10,$12,$14,$16}' | sed "s/)://g;s/,//g;s/index=//g;s/'//g;s/}//" >>$trialfile

	printf ">>OUTPUT: $trialfile written to disk\n"
	

# paste the two files together and output to a final data file
# check for old file first
	fileExists ${subjID}_data.txt

	touch ${subjID}_data.txt
	outfile=${subjID}_data.txt
	printf "# file generated for $subjID by $USER on `date`\n" >>$outfile
	printf "\n# CMD: \`paste $respfile $trialfile >>$outfile\`\n\n"

	paste $respfile $trialfile >>$outfile

	printf ">>OUTPUT: $outfile written to disk\n\n"

	cat << finishedEOF
>>Please run the subroutine found in the Excel workbook
'__imgBehDataScript.xls' to finish processing the data. Import
the '${subjID}_data.txt' as a text file, delimited by tab+space.
Also note, the onset times for responses and trials likely do not
line up; the Excel routine will correct for offsets due to 'No
Response' and 'Multiple Response' trials.

finishedEOF

exit 0
